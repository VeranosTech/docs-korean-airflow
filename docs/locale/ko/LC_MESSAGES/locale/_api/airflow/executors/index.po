# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Airflow package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Airflow 1.10.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-03 17:47+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../_api/airflow/executors/index.rst:4
msgid ":mod:`airflow.executors`"
msgstr ""

#: ../../_api/airflow/executors/index.rst:12
msgid "Submodules"
msgstr ""

#: ../../_api/airflow/executors/index.rst:32
msgid "Package Contents"
msgstr ""

#: ../../_api/airflow/executors/index.rst:41
#: ../../_api/airflow/executors/index.rst:261
#: ../../_api/airflow/executors/index.rst:312
msgid "Bases::class:`object`"
msgstr ""

#: ../../_api/airflow/executors/index.rst:45
msgid "Convenience super-class to have a logger configured with the class name"
msgstr ""

#: ../../_api/airflow/executors/index.rst:87
msgid "Bases::class:`Exception`"
msgstr ""

#: ../../_api/airflow/executors/index.rst:91
msgid ""
"Base class for all Airflow's errors. Each custom exception should be "
"derived from this class"
msgstr ""

#: ../../_api/airflow/executors/index.rst:115
msgid "Bases::class:`airflow.utils.log.logging_mixin.LoggingMixin`"
msgstr ""

#: ../../_api/airflow/executors/index.rst:126
msgid ""
"Executors may need to get things started. For example LocalExecutor "
"starts N workers."
msgstr ""

#: ../../_api/airflow/executors/index.rst:150
msgid "Checks if a task is either queued or running in this executor"
msgstr ""

#: ../../_api/airflow/executors/index.rst
msgid "Parameters"
msgstr ""

#: ../../_api/airflow/executors/index.rst:152
msgid "TaskInstance"
msgstr ""

#: ../../_api/airflow/executors/index.rst
msgid "Returns"
msgstr ""

#: ../../_api/airflow/executors/index.rst:153
msgid "True if the task is known to this executor"
msgstr ""

#: ../../_api/airflow/executors/index.rst:162
msgid ""
"Sync will get called periodically by the heartbeat method. Executors "
"should override this to perform gather statuses."
msgstr ""

#: ../../_api/airflow/executors/index.rst:200
msgid ""
"Returns and flush the event buffer. In case dag_ids is specified it will "
"only return and flush events for the given dag_ids. Otherwise it returns "
"and flushes all"
msgstr ""

#: ../../_api/airflow/executors/index.rst:204
msgid "to dag_ids to return events for, if None returns all"
msgstr ""

#: ../../_api/airflow/executors/index.rst:205
msgid "a dict of events"
msgstr ""

#: ../../_api/airflow/executors/index.rst:214
msgid "This method will execute the command asynchronously."
msgstr ""

#: ../../_api/airflow/executors/index.rst:223
msgid ""
"This method is called when the caller is done submitting job and wants to"
" wait synchronously for the job submitted previously to be all done."
msgstr ""

#: ../../_api/airflow/executors/index.rst:234
msgid "This method is called when the daemon receives a SIGTERM"
msgstr ""

#: ../../_api/airflow/executors/index.rst:247
#: ../../_api/airflow/executors/index.rst:396
msgid "Bases::class:`airflow.executors.base_executor.BaseExecutor`"
msgstr ""

#: ../../_api/airflow/executors/index.rst:251
msgid ""
"LocalExecutor executes tasks locally in parallel. It uses the "
"multiprocessing Python library and queues to parallelize the execution of"
" tasks."
msgstr ""

#: ../../_api/airflow/executors/index.rst:265
msgid ""
"Implements LocalExecutor with unlimited parallelism, starting one process"
" per each command to execute."
msgstr ""

#: ../../_api/airflow/executors/index.rst:284
#: ../../_api/airflow/executors/index.rst:335
msgid "the key to identify the TI"
msgstr ""

#: ../../_api/airflow/executors/index.rst:286
#: ../../_api/airflow/executors/index.rst:337
msgid "the command to execute"
msgstr ""

#: ../../_api/airflow/executors/index.rst:316
msgid ""
"Implements LocalExecutor with limited parallelism using a task queue to "
"coordinate work distribution."
msgstr ""

#: ../../_api/airflow/executors/index.rst:400
msgid ""
"This executor will only run one task instance at a time, can be used for "
"debugging. It is also the only executor that can be used with sqlite "
"since sqlite doesn't support multiple connections."
msgstr ""

#: ../../_api/airflow/executors/index.rst:404
msgid ""
"Since we want airflow to work out of the box, it defaults to this "
"SequentialExecutor alongside sqlite as you first install it."
msgstr ""

#: ../../_api/airflow/executors/index.rst:454
msgid "Integrate plugins to the context."
msgstr ""

#: ../../_api/airflow/executors/index.rst:467
msgid ""
"Creates a new instance of the configured executor if none exists and "
"returns it"
msgstr ""

#: ../../_api/airflow/executors/index.rst:549
msgid ""
"Creates a new instance of the named executor. In case the executor name "
"is not know in airflow, look for it in the plugins"
msgstr ""

