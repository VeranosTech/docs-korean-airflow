# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Airflow package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Airflow 1.10.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-03 15:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../scheduler.rst:19
msgid "Scheduling & Triggers"
msgstr ""

#: ../../scheduler.rst:21
msgid ""
"The Airflow scheduler monitors all tasks and all DAGs, and triggers the "
"task instances whose dependencies have been met. Behind the scenes, it "
"spins up a subprocess, which monitors and stays in sync with a folder for"
" all DAG objects it may contain, and periodically (every minute or so) "
"collects DAG parsing results and inspects active tasks to see whether "
"they can be triggered."
msgstr ""

#: ../../scheduler.rst:28
msgid ""
"The Airflow scheduler is designed to run as a persistent service in an "
"Airflow production environment. To kick it off, all you need to do is "
"execute ``airflow scheduler``. It will use the configuration specified in"
" ``airflow.cfg``."
msgstr ""

#: ../../scheduler.rst:33
msgid ""
"Note that if you run a DAG on a ``schedule_interval`` of one day, the run"
" stamped ``2016-01-01`` will be triggered soon after "
"``2016-01-01T23:59``. In other words, the job instance is started once "
"the period it covers has ended."
msgstr ""

#: ../../scheduler.rst:38
msgid ""
"**Let's Repeat That** The scheduler runs your job one "
"``schedule_interval`` AFTER the start date, at the END of the period."
msgstr ""

#: ../../scheduler.rst:41
msgid ""
"The scheduler starts an instance of the executor specified in the your "
"``airflow.cfg``. If it happens to be the "
":class:`airflow.contrib.executors.local_executor.LocalExecutor`, tasks "
"will be executed as subprocesses; in the case of "
":class:`airflow.executors.celery_executor.CeleryExecutor`, "
":class:`airflow.executors.dask_executor.DaskExecutor``, and "
":class:`airflow.contrib.executors.mesos_executor.MesosExecutor`, tasks "
"are executed remotely."
msgstr ""

#: ../../scheduler.rst:46
msgid "To start a scheduler, simply run the command:"
msgstr ""

#: ../../scheduler.rst:54
msgid "DAG Runs"
msgstr ""

#: ../../scheduler.rst:56
msgid "A DAG Run is an object representing an instantiation of the DAG in time."
msgstr ""

#: ../../scheduler.rst:58
msgid ""
"Each DAG may or may not have a schedule, which informs how ``DAG Runs`` "
"are created. ``schedule_interval`` is defined as a DAG arguments, and "
"receives preferably a `cron expression "
"<https://en.wikipedia.org/wiki/Cron#CRON_expression>`_ as a ``str``, or a"
" ``datetime.timedelta`` object. Alternatively, you can also use one of "
"these cron \"preset\":"
msgstr ""

#: ../../scheduler.rst:66
msgid "preset"
msgstr ""

#: ../../scheduler.rst:66
msgid "meaning"
msgstr ""

#: ../../scheduler.rst:66
msgid "cron"
msgstr ""

#: ../../scheduler.rst:68
msgid "``None``"
msgstr ""

#: ../../scheduler.rst:68
msgid "Don't schedule, use for exclusively \"externally triggered\" DAGs"
msgstr ""

#: ../../scheduler.rst:71
msgid "``@once``"
msgstr ""

#: ../../scheduler.rst:71
msgid "Schedule once and only once"
msgstr ""

#: ../../scheduler.rst:73
msgid "``@hourly``"
msgstr ""

#: ../../scheduler.rst:73
msgid "Run once an hour at the beginning of the hour"
msgstr ""

#: ../../scheduler.rst:73
msgid "``0 * * * *``"
msgstr ""

#: ../../scheduler.rst:75
msgid "``@daily``"
msgstr ""

#: ../../scheduler.rst:75
msgid "Run once a day at midnight"
msgstr ""

#: ../../scheduler.rst:75
msgid "``0 0 * * *``"
msgstr ""

#: ../../scheduler.rst:77
msgid "``@weekly``"
msgstr ""

#: ../../scheduler.rst:77
msgid "Run once a week at midnight on Sunday morning"
msgstr ""

#: ../../scheduler.rst:77
msgid "``0 0 * * 0``"
msgstr ""

#: ../../scheduler.rst:79
msgid "``@monthly``"
msgstr ""

#: ../../scheduler.rst:79
msgid "Run once a month at midnight of the first day of the month"
msgstr ""

#: ../../scheduler.rst:79
msgid "``0 0 1 * *``"
msgstr ""

#: ../../scheduler.rst:81
msgid "``@yearly``"
msgstr ""

#: ../../scheduler.rst:81
msgid "Run once a year at midnight of January 1"
msgstr ""

#: ../../scheduler.rst:81
msgid "``0 0 1 1 *``"
msgstr ""

#: ../../scheduler.rst:84
msgid ""
"**Note**: Use ``schedule_interval=None`` and not "
"``schedule_interval='None'`` when you don't want to schedule your DAG."
msgstr ""

#: ../../scheduler.rst:87
msgid ""
"Your DAG will be instantiated for each schedule, while creating a ``DAG "
"Run`` entry for each schedule."
msgstr ""

#: ../../scheduler.rst:90
msgid ""
"DAG runs have a state associated to them (running, failed, success) and "
"informs the scheduler on which set of schedules should be evaluated for "
"task submissions. Without the metadata at the DAG run level, the Airflow "
"scheduler would have much more work to do in order to figure out what "
"tasks should be triggered and come to a crawl. It might also create "
"undesired processing when changing the shape of your DAG, by say adding "
"in new tasks."
msgstr ""

#: ../../scheduler.rst:99
msgid "Backfill and Catchup"
msgstr ""

#: ../../scheduler.rst:101
msgid ""
"An Airflow DAG with a ``start_date``, possibly an ``end_date``, and a "
"``schedule_interval`` defines a series of intervals which the scheduler "
"turn into individual Dag Runs and execute. A key capability of Airflow is"
" that these DAG Runs are atomic, idempotent items, and the scheduler, by "
"default, will examine the lifetime of the DAG (from start to end/now, one"
" interval at a time) and kick off a DAG Run for any interval that has not"
" been run (or has been cleared). This concept is called Catchup."
msgstr ""

#: ../../scheduler.rst:107
msgid ""
"If your DAG is written to handle its own catchup (IE not limited to the "
"interval, but instead to \"Now\" for instance.), then you will want to "
"turn catchup off (Either on the DAG itself with ``dag.catchup = False``) "
"or by default at the configuration file level with ``catchup_by_default ="
" False``. What this will do, is to instruct the scheduler to only create "
"a DAG Run for the most current instance of the DAG interval series."
msgstr ""

#: ../../scheduler.rst:142
msgid ""
"In the example above, if the DAG is picked up by the scheduler daemon on "
"2016-01-02 at 6 AM, (or from the command line), a single DAG Run will be "
"created, with an ``execution_date`` of 2016-01-01, and the next one will "
"be created just after midnight on the morning of 2016-01-03 with an "
"execution date of 2016-01-02."
msgstr ""

#: ../../scheduler.rst:146
msgid ""
"If the ``dag.catchup`` value had been True instead, the scheduler would "
"have created a DAG Run for each completed interval between 2015-12-01 and"
" 2016-01-02 (but not yet one for 2016-01-02, as that interval hasn't "
"completed) and the scheduler will execute them sequentially. This "
"behavior is great for atomic datasets that can easily be split into "
"periods. Turning catchup off is great if your DAG Runs perform backfill "
"internally."
msgstr ""

#: ../../scheduler.rst:153
msgid "External Triggers"
msgstr ""

#: ../../scheduler.rst:155
msgid ""
"Note that ``DAG Runs`` can also be created manually through the CLI while"
" running an ``airflow trigger_dag`` command, where you can define a "
"specific ``run_id``. The ``DAG Runs`` created externally to the scheduler"
" get associated to the trigger's timestamp, and will be displayed in the "
"UI alongside scheduled ``DAG runs``."
msgstr ""

#: ../../scheduler.rst:161
msgid ""
"In addition, you can also manually trigger a ``DAG Run`` using the web UI"
" (tab \"DAGs\" -> column \"Links\" -> button \"Trigger Dag\")."
msgstr ""

#: ../../scheduler.rst:165
msgid "To Keep in Mind"
msgstr ""

#: ../../scheduler.rst:166
msgid ""
"The first ``DAG Run`` is created based on the minimum ``start_date`` for "
"the tasks in your DAG."
msgstr ""

#: ../../scheduler.rst:168
msgid ""
"Subsequent ``DAG Runs`` are created by the scheduler process, based on "
"your DAG's ``schedule_interval``, sequentially."
msgstr ""

#: ../../scheduler.rst:170
msgid ""
"When clearing a set of tasks' state in hope of getting them to re-run, it"
" is important to keep in mind the ``DAG Run``'s state too as it defines "
"whether the scheduler should look into triggering tasks for that run."
msgstr ""

#: ../../scheduler.rst:174
msgid "Here are some of the ways you can **unblock tasks**:"
msgstr ""

#: ../../scheduler.rst:176
msgid ""
"From the UI, you can **clear** (as in delete the status of) individual "
"task instances from the task instances dialog, while defining whether you"
" want to includes the past/future and the upstream/downstream "
"dependencies. Note that a confirmation window comes next and allows you "
"to see the set you are about to clear. You can also clear all task "
"instances associated with the dag."
msgstr ""

#: ../../scheduler.rst:181
msgid ""
"The CLI command ``airflow clear -h`` has lots of options when it comes to"
" clearing task instance states, including specifying date ranges, "
"targeting task_ids by specifying a regular expression, flags for "
"including upstream and downstream relatives, and targeting task instances"
" in specific states (``failed``, or ``success``)"
msgstr ""

#: ../../scheduler.rst:185
msgid ""
"Clearing a task instance will no longer delete the task instance record. "
"Instead it updates max_tries and set the current task instance state to "
"be None."
msgstr ""

#: ../../scheduler.rst:187
msgid ""
"Marking task instances as failed can be done through the UI. This can be "
"used to stop running task instances."
msgstr ""

#: ../../scheduler.rst:188
msgid ""
"Marking task instances as successful can be done through the UI. This is "
"mostly to fix false negatives, or for instance when the fix has been "
"applied outside of Airflow."
msgstr ""

#: ../../scheduler.rst:190
msgid ""
"The ``airflow backfill`` CLI subcommand has a flag to ``--mark_success`` "
"and allows selecting subsections of the DAG as well as specifying date "
"ranges."
msgstr ""

