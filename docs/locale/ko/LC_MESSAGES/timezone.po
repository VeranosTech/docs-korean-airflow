# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Airflow package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Airflow 1.10.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-03 15:37+0900\n"
"PO-Revision-Date: 2019-05-02 15:51+0900\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ko\n"
"X-Generator: Poedit 2.2.1\n"

#: ../../timezone.rst:19
msgid "Time zones"
msgstr "타임 존(Time zones)"

#: ../../timezone.rst:21
msgid ""
"Support for time zones is enabled by default. Airflow stores datetime "
"information in UTC internally and in the database. It allows you to run "
"your DAGs with time zone dependent schedules. At the moment Airflow does "
"not convert them to the end user’s time zone in the user interface. "
"There it will always be displayed in UTC. Also templates used in "
"Operators are not converted. Time zone information is exposed and it is "
"up to the writer of DAG what do with it."
msgstr ""
"기본적으로 타임존(time zone)에 대해 지원되고 사용 가능하다. 에어플로우는 "
"날짜 정보를 내부 및 데이터베이스에 UTC로 저장한다. 예정된 대로 타임존에 "
"따라 DAG를 실행할 수 있다. 현재 에어플로우는 사용자 인터페이스에서 최종 "
"사용자의 타임존으 변환하지 않는다. UI에서는 항상 UTC로 표시될 것이다. 또"
"한 오퍼레이터에서 사용되는 템플릿은 변환되지 않는다. 타임존 정보는 노출되"
"고 DAG 작성자에게 달려있다."

#: ../../timezone.rst:26
msgid ""
"This is handy if your users live in more than one time zone and you want "
"to display datetime information according to each user’s wall clock."
msgstr ""
"이 기능은 사용자가 둘 이상의 시간대에 살고 있는데, 각 사용자마다 자신의 "
"벽에 걸린 시계와 같은 날짜 정보를 보여주기를 원할 때 유용하다."

#: ../../timezone.rst:29
msgid ""
"Even if you are running Airflow in only one time zone it is still good "
"practice to store data in UTC in your database (also before Airflow "
"became time zone aware this was also to recommended or even required "
"setup). The main reason is Daylight Saving Time (DST). Many countries "
"have a system of DST, where clocks are moved forward in spring and "
"backward in autumn. If you’re working in local time, you’re likely to "
"encounter errors twice a year, when the transitions happen. (The "
"pendulum and pytz documentation discusses these issues in greater "
"detail.) This probably doesn’t matter for a simple DAG, but it’s a "
"problem if you are in, for example, financial services where you have "
"end of day deadlines to meet."
msgstr ""
"에어플로우를 단일 시간대에서만 사용하는 경우라도 데이터베이스에서 UTC로 "
"데이터를 저장하는 것이 좋다(또한 에어플로우가 타임존 의식하기 전에 권장 "
"또는 요구되는 설정 사항이다). 주된 이유는 바로 일광 절약 시간제(Daylight "
"Saving Time, DST) 때문이다. 많은 나라에서 봄에는 원래 시간보다 앞당기고 "
"가을에는 다시 되돌리는 DST 시스템을 사용하고 있다. 현지 시간으로 작업한다"
"면, 이러한 시간 변경 때문에 1년에 두 차례 정도 에러가 발생할 수 있다"
"(pendulum과 pytz 문서에서 이에 대해 자세히 설명한다.). 이것은 아마도 단순"
"한 DAG에는 문제가 되지 않겠지만, 예를 들어, 매일 종료 시점을 맞춰야 하는 "
"금융 서비스의 경우 문제가 될 수 있다."

#: ../../timezone.rst:37
msgid ""
"The time zone is set in ``airflow.cfg``. By default it is set to utc, "
"but you change it to use the system’s settings or an arbitrary IANA time "
"zone, e.g. `Europe/Amsterdam`. It is dependent on `pendulum`, which is "
"more accurate than `pytz`. Pendulum is installed when you install "
"Airflow."
msgstr ""
"타임존은 ``airflow.cfg``\\에서 설정한다. 기본적으로 utc로 설정되어 있지"
"만, 시스템 설정이나 예를 들어 `Europe/Amsterdam`\\과 같이 임의의 IANA 타"
"임존을 사용하기 위해 변경한다. 이는 `pyz`\\보다 정확도가 높은 `pendulum`"
"\\에 의존한다. Pendulum은 에어플로우 설치와 함께 설치된다."

#: ../../timezone.rst:41
msgid "Please note that the Web UI currently only runs in UTC."
msgstr "웹 UI는 현재 UTC로만 실행된다는 점에 유의하라."

#: ../../timezone.rst:44
msgid "Concepts"
msgstr "개념"

#: ../../timezone.rst:46
msgid "Naïve and aware datetime objects"
msgstr "순진하고(Naïve) 자각적인(aware) datetime 객체"

#: ../../timezone.rst:48
msgid ""
"Python’s datetime.datetime objects have a tzinfo attribute that can be "
"used to store time zone information, represented as an instance of a "
"subclass of datetime.tzinfo. When this attribute is set and describes an "
"offset, a datetime object is aware. Otherwise, it’s naive."
msgstr ""
"파이썬의 datetime.datetime 객체는 datetime.tzinfo의 하위 클래스의 인스턴"
"스로 표현된는 타임존 정보를 저장하기 위해 사용되는 tzinfo 속성을 가지고 "
"있다. 이 속성을 설정하고 오프셋을 설명하면, datetime 객체가 인식(aware)된"
"다. 그렇지 않으면 naive하게 된다."

#: ../../timezone.rst:52
msgid ""
"You can use timezone.is_localized() and timezone.is_naive() to determine "
"whether datetimes are aware or naive."
msgstr ""
"그리고 timezone.is_localized() 그리고 timezone.is_naive()를 사용하여 "
"datetime이 인식 여부를 결정할 수 있다."

#: ../../timezone.rst:54
msgid ""
"Because Airflow uses time-zone-aware datetime objects. If your code "
"creates datetime objects they need to be aware too."
msgstr ""
"에어플로우가 time-zone-aware datetime 객체를 사용하기 때문이다. 만약 코드"
"에서 datetime 객체를 생성한다면 이것도 인식되어야 한다."

#: ../../timezone.rst:65
msgid "Interpretation of naive datetime objects"
msgstr "인식되지 못한 datetime 객체 해석(Interpretation)"

#: ../../timezone.rst:67
msgid ""
"Although Airflow operates fully time zone aware, it still accepts naive "
"date time objects for `start_dates` and `end_dates` in your DAG "
"definitions. This is mostly in order to preserve backwards "
"compatibility. In case a naive `start_date` or `end_date` is encountered "
"the default time zone is applied. It is applied in such a way that it is "
"assumed that the naive date time is already in the default time zone. In "
"other words if you have a default time zone setting of `Europe/"
"Amsterdam` and create a naive datetime `start_date` of "
"`datetime(2017,1,1)` it is assumed to be a `start_date` of Jan 1, 2017 "
"Amsterdam time."
msgstr ""
"에어플로우는 전체 타임존을 인식하여 작동하지만, DAG 정의에서 "
"`start_dates`\\와 `end_dates`\\에 대한 naive datetime 객체를 그대로 받아"
"들인다. 이는 대부분의 경우 역호환성(backwards compatibility)를 보존하기 "
"위함이다. naive `start_date` 또는 `end_date`\\가 발생할 경우 기본 타임존"
"이 적용된다. naive datetime이 이미 기본 타임존에 있다고 가정하는 방식으"
"로 적용된다. 즉, 기본 타임존을 `Europe/Amsterdam`\\으로 설정했고 naive 날"
"짜 시간으로 `datetime(2017,1,1)`\\을 `start_date`\\로 생성하면 "
"`start_date`\\가 암스테르담 시간으로 2017년 1월 1일이 될 것이라고 가정한"
"다."

#: ../../timezone.rst:85
msgid ""
"Unfortunately, during DST transitions, some datetimes don’t exist or are "
"ambiguous. In such situations, pendulum raises an exception. That’s why "
"you should always create aware datetime objects when time zone support "
"is enabled."
msgstr ""
"불행히도, DST 변환을 사용하는 동안에는, 어떤 datetime은 존재하지 않거나 "
"모호하다. 이러한 상황에서 pendulum은 예외를 발생한다. 따라서 타임존 지원"
"이 가능한 경우에는 항상 인식 가능한(aware) datetime 객체를 생성해야 한다."

#: ../../timezone.rst:89
msgid ""
"In practice, this is rarely an issue. Airflow gives you aware datetime "
"objects in the models and DAGs, and most often, new datetime objects are "
"created from existing ones through timedelta arithmetic. The only "
"datetime that’s often created in application code is the current time, "
"and timezone.utcnow() automatically does the right thing."
msgstr ""
"실제로 이런 문제는 거의 발생하지 않는다. 에어플로우는 모델과 DAG에서 "
"aware datetime 객체를 제공하며, 거의 대부분, 새로운 datetime 객체는 "
"timedelta 계산을 통하여 이미 존재하는 것으로 부터 생성된다. 어플리케이션 "
"코드에서 자주 생성되는 유일한 datetime은 현재 시간이며, 자동적으로 "
"timezone.utcnow()가 올바른 작업을 수행한다."

#: ../../timezone.rst:95
msgid "Default time zone"
msgstr "기본 타임존"

#: ../../timezone.rst:97
msgid ""
"The default time zone is the time zone defined by the `default_timezone` "
"setting under `[core]`. If you just installed Airflow it will be set to "
"`utc`, which is recommended. You can also set it to `system` or an IANA "
"time zone (e.g.`Europe/Amsterdam`). DAGs are also evaluated on Airflow "
"workers, it is therefore important to make sure this setting is equal on "
"all Airflow nodes."
msgstr ""
"기본 표준 시간대는 `[core]` 아래에 `default_timezone` 설정에 의해 정의된 "
"타임존이다. 만약 에어플로우를 막 설치했다면 권장한대로 `utc`\\가 설정되"
"어 있을 것이다. 또한 `system` 또는 IANA 타임존(예를 들어 `Europe/"
"Amsterdam`\\)으로 설정할 수 있다. DAG는 에어플로우 워커(worker)로 평가되"
"고, 따라서 모든 에어플로우 노드에서이러한 설정이 동일한지 확인하는 것이 "
"중요하다."

#: ../../timezone.rst:110
msgid "Time zone aware DAGs"
msgstr "타임존 인식 DAG"

#: ../../timezone.rst:112
msgid ""
"Creating a time zone aware DAG is quite simple. Just make sure to supply "
"a time zone aware `start_date`. It is recommended to use `pendulum` for "
"this, but `pytz` (to be installed manually) can also be used for this."
msgstr ""
"DAG를 인지하는 타임존을 생성하는 것은 꽤 간단하다. 반드시 `start_date`"
"\\을 인식한(aware) 타임존을 제공하면 된다. 이를 위하여 `pendulum`\\을 사"
"용하는 것이 권장되며, (수동으로 설치하는) `pytz`\\도 사용할 수 있다."

#: ../../timezone.rst:130
msgid ""
"Please note that while it is possible to set a `start_date` and "
"`end_date` for Tasks always the DAG timezone or global timezone (in that "
"order) will be used to calculate the next execution date. Upon first "
"encounter the start date or end date will be converted to UTC using the "
"timezone associated with start_date or end_date, then for calculations "
"this timezone information will be disregarded."
msgstr ""
"항상 (이 순서에 따라) DAG 타임존 또는 글로벌 타임존을 사용하여 다음 실행"
"일을 계산할 수 있기 때문에 태스크에 대해 `start_date`\\와 `end_date`\\를 "
"설정할 수 있다. 처음 발생할 때 시작 날짜 또는 종료 날짜는 start_date, "
"end_date와 연관된 타임존을 사용하여 UTC로 변환되, 다음 계산을 위해 타임"
"존 정보가 무시된다."

#: ../../timezone.rst:136
msgid "Templates"
msgstr "템플릿(Templates)"

#: ../../timezone.rst:138
msgid ""
"Airflow returns time zone aware datetimes in templates, but does not "
"convert them to local time so they remain in UTC. It is left up to the "
"DAG to handle this."
msgstr ""
"에어플로우는 템플릿에서 타임존을 인식하는 datetime을 반환하지만, 로컬 시"
"간으로 변환하지 않고 UTC로 유지된다. 이 문제를 처리하려면 DAG에 남겨두어"
"라."

#: ../../timezone.rst:150
msgid "Cron schedules"
msgstr "크론 스케쥴(Cron schedules)"

#: ../../timezone.rst:152
msgid ""
"In case you set a cron schedule, Airflow assumes you will always want to "
"run at the exact same time. It will then ignore day light savings time. "
"Thus, if you have a schedule that says run at the end of interval every "
"day at 08:00 GMT+1 it will always run at the end of interval 08:00 GMT"
"+1, regardless if day light savings time is in place."
msgstr ""
"크론 스케쥴을 설정하는 경우, 에어플로우는 항상 정확히 동일한 시간에 실행"
"하길 원하는 것으로 가정한다. 이는 일광 절약 시간(DST)을 무시할 것이다. 따"
"라서, 매일 08:00 GMT+1에 인터벌이 종료되도록 실행하는 스케쥴이 있을 때, "
"일광 절약 시간이 적용되는 지역인지와 관계없이 항상 08:00 GMT+1 간격 끝에"
"서 실행될 것이다."

#: ../../timezone.rst:159
msgid "Time deltas"
msgstr "타임 델타(Time deltas)"

#: ../../timezone.rst:160
msgid ""
"For schedules with time deltas Airflow assumes you always will want to "
"run with the specified interval. So if you specify a timedelta(hours=2) "
"you will always want to run two hours later. In this case day light "
"savings time will be taken into account."
msgstr ""
"타임 델타가 있는 스케쥴의 경우 에어플로우는 항상 지정된 인터벌로 실행하"
"길 원한다고 가정한다. 따라서 만약 timedelta(hours=2)로 명시할 경우 2시간 "
"후에 항상 실행되기를 원할 것이다. 이 경우에는 일광 절약 시간이 고려된다."
